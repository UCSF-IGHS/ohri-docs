name: OHRI DOCS CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types:
      - created
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
      # - name: Cache dependencies
      #   id: cache
      #   uses: actions/cache@v3
      #   with:
      #     path: |
      #       ~/.pnpm
      #       ${{ github.workspace }}/.next/cache
      #     # Generate a new cache whenever packages or source files change.
      #     key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
      #     # If source files changed but packages didn't, rebuild from a prior cache.
      #     restore-keys: |
      #       ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: pnpm install

      - name: Run build
        run: pnpm build

  update_config:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.ref == 'refs/heads/main' }}

    steps:
      - name: Checkout repo to make config folder local
        uses: actions/checkout@v3
        with:
          ref: main
      - run: ls -la .github/

      - name: Copy Branch main Import Map to remote
        uses: appleboy/scp-action@v0.1.4
        with:
          source: .github/deploy_docs.sh
          target: /usr/share/tomcat/microfrontends/ohri-docs
          host: ${{ secrets.HISTAC_HOST }}
          username: ${{ secrets.HISTAC_USERNAME }}
          key: ${{ secrets.HISTAC_OHRI_KEY}}
          port: ${{ secrets.HISTAC_PORT }}

  docs_deployment:
    runs-on: ubuntu-latest
    needs: update_config
    if: ${{ github.ref == 'refs/heads/main' }}

    steps:
      # Update the Microfrontends to reflect what we have in the working branch
      - name: Compute Timestamp
        run: echo "TIMESTAMP=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
      - uses: garygrossgarten/github-action-ssh@release
        name: BackUp and Run the Update DOCS Site Script
        with:
          command: cd /usr/share/tomcat/microfrontends/ohri-docs/.github && sh deploy_docs.sh
          host: ${{ secrets.HISTAC_HOST }}
          username: ${{ secrets.OHRI_DOCS_USER }}
          # username: ${{ secrets.HISTAC_USERNAME }}
          privateKey: ${{ secrets.OHRI_DOCS_USER_KEY}}
          # privateKey: ${{ secrets.HISTAC_KEY}}
          port: ${{ secrets.HISTAC_PORT }}
